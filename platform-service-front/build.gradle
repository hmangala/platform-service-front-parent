/**
 * Copyright (C) Davinta Technologies 2017. All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Davinta Technologies. You shall not disclose such Confidential Information
 * and shall use it only in accordance with the terms and conditions
 * entered into with Davinta Technologies.
 */

buildscript {
	repositories {
		mavenLocal()
		maven { url "$repositoryUrl" }
	}

	dependencies {
		classpath 'com.davinta.gradle:aeus-build-conventions:1.+'
		classpath 'se.transmode.gradle:gradle-docker:1.2'
	}
}

group = 'com.davinta.aeus.service'
description = 'REGULUS SERVICE CUSTOMER'

/** SET PROJECT VERSION FROM ROOT PROJECT */
def projectProperties = new Properties()
file("../gradle.properties").withInputStream { projectProperties.load(it) }
version = projectProperties.getProperty("version")

apply plugin: 'com.davinta.convention.root'
apply plugin: 'com.davinta.convention.spring-boot'
apply plugin: 'docker'

// JVM Settings for Application Start Scripts
applicationDefaultJvmArgs = [ "-server", "-d64", "-Xms512m", "-Xmx1024m", "-XX:MaxMetaspaceSize=512m", "-Dfile.encoding=UTF-8", "-XX:+UseG1GC", "-XX:MaxGCPauseMillis=200", "-verbose:gc", "-XX:+PrintGCDetails", "-XX:+PrintGCDateStamps", "-Xloggc:/var/log/davinta/regulus-service-customer/regulus-service-customer-gc-%t.log", "-XX:+UseGCLogFileRotation", "-XX:NumberOfGCLogFiles=10", "-XX:GCLogFileSize=100m", "-XX:+HeapDumpOnOutOfMemoryError", "-XX:HeapDumpPath=/var/log/davinta/regulus-service-customer/regulus-service-customer-heapdump.hprof" ]

configurations.all {
	exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->	
		if (details.requested.name == 'logback-classic' || details.requested.name == 'logback-core') {
			details.useVersion '1.2.2'
		}
	}
}

dependencyManagement {
	imports {
		mavenBom "com.platform.tools:aeus-build-dependencies:1.0"
	}
}

dependencies {
	compile project (':platform-messaging-front')

	compile 'com.platform.framework:platform-rest-client:1.3.0.RELEASE'
	compile ("com.platform.integration:platform-integration-kafka:1.2.0.BUILD-SNAPSHOT") { changing = true }

	//security
	compile 'ch.qos.logback:logback-classic'
	compile 'ch.qos.logback:logback-core'
	compile 'com.github.ulisesbocchio:jasypt-spring-boot'
	compile 'io.springfox:springfox-swagger-ui'
	compile 'io.springfox:springfox-swagger2'
	compile 'net.logstash.logback:logstash-logback-encoder'
	compile 'org.apache.tomcat.embed:tomcat-embed-el'
	compile 'org.codehaus.janino:janino'
	compile 'org.jasypt:jasypt'
	compile 'uk.org.lidalia:sysout-over-slf4j'
	compile 'log4j:log4j:1.2.17'

	compile "javax.interceptor:javax.interceptor-api:1.2.1"

	compile 'org.springframework.boot:spring-boot-starter-actuator'
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.cloud:spring-cloud-starter-sleuth'
	compile 'org.springframework.cloud:spring-cloud-starter-zipkin'
	compile("org.springframework.boot:spring-boot-starter-websocket")
	compile("org.webjars:webjars-locator")
	compile("org.webjars:sockjs-client:1.0.2")
    compile("org.webjars:stomp-websocket:2.3.3")
    compile("org.webjars:bootstrap:3.3.7")
    compile("org.webjars:jquery:3.1.0")
	
	compile "org.springframework.kafka:spring-kafka:2.1.4.RELEASE"
	

	testCompile 'junit:junit'
	testCompile 'org.mockito:mockito-core'
}

bootRepackage {
	mainClass = 'com.davinta.aeus.service.front.Application'
}

//AEUS distribution
apply from: "distribution.gradle"
